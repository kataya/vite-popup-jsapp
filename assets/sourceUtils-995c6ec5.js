import{c0 as h,c1 as p,b$ as g,c2 as y,c3 as w,c4 as f,am as _}from"./index-39c80a15.js";class b{constructor(){this.code=null,this.description=null}}class I{constructor(n){this.error=new b,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=n}}function d(e){return new I(e)}class v{constructor(n){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=n}}function V(e){return new v(e)}const a=new Set;function $(e,n,i,m=!1,u){a.clear();for(const r in i){const t=e.get(r);if(!t)continue;const l=i[r],s=q(t,l);if(s!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:t,originalValue:l,sanitizedValue:s}}),a.add(t.name),t&&(m||t.editable)){const c=h(t,s);if(c)return d(p(c,t,s));n[t.name]=s}}for(const r of(e==null?void 0:e.requiredFields)??[])if(!a.has(r.name))return d(`missing required field "${r.name}"`);return null}function q(e,n){let i=n;return typeof n=="string"&&g(e)?i=parseFloat(n):n!=null&&y(e)&&typeof n!="string"&&(i=String(n)),w(i)}let o;function j(e,n){if(!e||!f(n))return e;if("rings"in e||"paths"in e){if(o==null)throw new TypeError("geometry engine not loaded");return o.simplify(n,e)}return e}async function P(){return o==null&&(o=await _(()=>import("./geometryEngineJSON-41dd4a98.js"),["./geometryEngineJSON-41dd4a98.js","./geometryEngineBase-9487766e.js","./index-39c80a15.js","./index-68e4a9fa.css","./geometryEngineJSON-7a5d20ed.js","./json-48e3ea08.js"],import.meta.url)),o}async function F(e,n){!f(e)||n!=="esriGeometryPolygon"&&n!=="esriGeometryPolyline"||await P()}export{V as c,$ as d,j as h,d as u,F as y};
